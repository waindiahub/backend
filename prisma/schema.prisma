generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  role              Role      @default(USER)
  isActive          Boolean   @default(true)
  isEmailVerified   Boolean   @default(false)
  emailVerifyToken  String?
  resetPasswordToken String?
  resetPasswordExpires DateTime?
  lastLogin         DateTime?
  planId            String?
  planStartDate     DateTime?
  planEndDate       DateTime?
  isTrialUsed       Boolean   @default(false)
  quotaUsed         Json      @default("{}")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  whatsappAccounts  WhatsAppAccount[]
  contacts          Contact[]
  templates         Template[]
  campaigns         Campaign[]
  flows             Flow[]
  messages          Message[]
  tickets           Ticket[]
  apiKeys           ApiKey[]
  payments          Payment[]
  teamMemberships   TeamMember[]
  ownedTeams        Team[]    @relation("TeamOwner")
  sessions          Session[]
  plan              Plan?     @relation(fields: [planId], references: [id])
  auditLogs         AuditLog[]
  assignedChats     Message[] @relation("AssignedAgent")
  agentTags         AgentTag[]
  formSubmissions   FormSubmission[]
  formBuilders      FormBuilder[]
  retargetCampaigns RetargetCampaign[]

  @@map("users")
}

model Plan {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  price       Float
  currency    String   @default("USD")
  interval    String   @default("month") // month, year
  isActive    Boolean  @default(true)
  features    Json     @default("[]")
  limits      Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users User[]

  @@map("plans")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model ClickLog {
  id        String   @id @default(uuid())
  messageId String
  contactId String
  buttonId  String
  buttonText String
  url       String?
  clickedAt DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("click_logs")
}

model FormBuilder {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?
  fields      Json     @default("[]")
  settings    Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submissions FormSubmission[]

  @@map("form_builders")
}

model FormSubmission {
  id        String   @id @default(uuid())
  formId    String
  contactId String
  userId    String
  data      Json
  source    String   @default("whatsapp")
  createdAt DateTime @default(now())

  form    FormBuilder @relation(fields: [formId], references: [id], onDelete: Cascade)
  contact Contact     @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("form_submissions")
}

model AgentTag {
  id     String @id @default(uuid())
  userId String
  tagId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
  @@map("agent_tags")
}

model RetargetCampaign {
  id          String   @id @default(uuid())
  userId      String
  name        String
  filters     Json     @default("{}")
  templateId  String?
  message     String?
  status      String   @default("draft")
  targetCount Int      @default(0)
  sentCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template? @relation(fields: [templateId], references: [id])

  @@map("retarget_campaigns")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User         @relation("TeamOwner", fields: [ownerId], references: [id])
  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(uuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

model WhatsAppAccount {
  id                String  @id @default(uuid())
  userId            String
  phoneNumberId     String  @unique
  accessToken       String
  businessAccountId String
  displayName       String
  status            String  @default("PENDING")
  isActive          Boolean @default(true)
  webhookUrl        String?
  webhookSecret     String?
  verifyToken       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  templates Template[]
  campaigns Campaign[]
  messages  Message[]

  @@map("whatsapp_accounts")
}

model Contact {
  id          String   @id @default(uuid())
  userId      String
  phone       String
  name        String?
  email       String?
  profilePic  String?
  isBlocked   Boolean  @default(false)
  lastSeen    DateTime?
  lastMessageAt DateTime?
  isUnread    Boolean  @default(false)
  hasReplied  Boolean  @default(false)
  adSource    String?
  fbAdId      String?
  source      ContactSource @default(MANUAL)
  customFields Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags     ContactTag[]
  attributes ContactAttribute[]
  messages Message[]
  campaignContacts CampaignContact[]
  clickLogs ClickLog[]
  formSubmissions FormSubmission[]

  @@unique([userId, phone])
  @@map("contacts")
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  color       String   @default("#3B82F6")
  description String?
  createdAt   DateTime @default(now())

  contacts ContactTag[]
  agentTags AgentTag[]

  @@map("tags")
}

model ContactTag {
  contactId String
  tagId     String
  createdAt DateTime @default(now())

  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([contactId, tagId])
  @@map("contact_tags")
}

model Attribute {
  id           String        @id @default(uuid())
  name         String
  type         AttributeType
  options      String[]      @default([])
  isRequired   Boolean       @default(false)
  defaultValue String?
  createdAt    DateTime      @default(now())

  contactAttributes ContactAttribute[]

  @@map("attributes")
}

model ContactAttribute {
  id          String @id @default(uuid())
  contactId   String
  attributeId String
  value       String

  contact   Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([contactId, attributeId])
  @@map("contact_attributes")
}

model Template {
  id                String            @id @default(uuid())
  userId            String
  whatsappAccountId String
  name              String
  category          TemplateCategory  @default(MARKETING)
  language          String            @default("en")
  status            TemplateStatus    @default(PENDING)
  components        Json
  variables         String[]          @default([])
  rejectionReason   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappAccount WhatsAppAccount @relation(fields: [whatsappAccountId], references: [id], onDelete: Cascade)
  campaigns       Campaign[]
  messages        Message[]
  retargetCampaigns RetargetCampaign[]

  @@map("templates")
}

model Campaign {
  id                String         @id @default(uuid())
  userId            String
  whatsappAccountId String
  templateId        String?
  name              String
  description       String?
  status            CampaignStatus @default(DRAFT)
  scheduledAt       DateTime?
  startedAt         DateTime?
  completedAt       DateTime?
  totalContacts     Int            @default(0)
  sentCount         Int            @default(0)
  deliveredCount    Int            @default(0)
  readCount         Int            @default(0)
  failedCount       Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappAccount WhatsAppAccount   @relation(fields: [whatsappAccountId], references: [id], onDelete: Cascade)
  template        Template?         @relation(fields: [templateId], references: [id])
  contacts        CampaignContact[]
  messages        Message[]

  @@map("campaigns")
}

model CampaignContact {
  id         String            @id @default(uuid())
  campaignId String
  contactId  String
  status     CampaignContactStatus @default(PENDING)
  sentAt     DateTime?
  deliveredAt DateTime?
  readAt     DateTime?
  failedAt   DateTime?
  errorMessage String?

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@map("campaign_contacts")
}

model Flow {
  id          String      @id @default(uuid())
  userId      String
  name        String
  description String?
  isActive    Boolean     @default(false)
  nodes       Json
  edges       Json
  triggers    Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("flows")
}

model Message {
  id                String        @id @default(uuid())
  userId            String
  whatsappAccountId String
  contactId         String
  campaignId        String?
  templateId        String?
  assignedAgentId   String?
  isBotHandoff      Boolean       @default(false)
  handoffReason     String?
  direction         MessageDirection
  type              MessageType   @default(TEXT)
  content           String
  mediaUrl          String?
  status            MessageStatus @default(SENT)
  whatsappMessageId String?
  errorMessage      String?
  timestamp         DateTime      @default(now())
  deliveredAt       DateTime?
  readAt            DateTime?

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  whatsappAccount WhatsAppAccount @relation(fields: [whatsappAccountId], references: [id], onDelete: Cascade)
  contact         Contact         @relation(fields: [contactId], references: [id], onDelete: Cascade)
  campaign        Campaign?       @relation(fields: [campaignId], references: [id])
  template        Template?       @relation(fields: [templateId], references: [id])
  assignedAgent   User?           @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  clickLogs       ClickLog[]

  @@map("messages")
}

model Ticket {
  id          String       @id @default(uuid())
  userId      String
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  assignedTo  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages TicketMessage[]

  @@map("tickets")
}

model TicketMessage {
  id        String   @id @default(uuid())
  ticketId  String
  userId    String
  content   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_messages")
}

model ApiKey {
  id          String     @id @default(uuid())
  userId      String
  name        String
  key         String     @unique
  scopes      ApiScope[] @default([])
  isActive    Boolean    @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model Payment {
  id              String        @id @default(uuid())
  userId          String
  amount          Float
  currency        String        @default("INR")
  status          PaymentStatus @default(PENDING)
  gateway         PaymentGateway
  gatewayPaymentId String?
  gatewayOrderId  String?
  description     String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Webhook {
  id        String      @id @default(uuid())
  url       String
  events    WebhookEvent[]
  secret    String?
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())

  @@map("webhooks")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum TeamRole {
  MEMBER
  ADMIN
  OWNER
}

enum ContactSource {
  MANUAL
  IMPORT
  API
  WHATSAPP
  WOOCOMMERCE
  ZAPIER
  FORM
}

enum AttributeType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
  SELECT
  MULTI_SELECT
}

enum TemplateCategory {
  MARKETING
  UTILITY
  AUTHENTICATION
}

enum TemplateStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  FAILED
}

enum CampaignContactStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum MessageDirection {
  INBOUND
  OUTBOUND
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  TEMPLATE
  INTERACTIVE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ApiScope {
  CONTACTS_READ
  CONTACTS_WRITE
  MESSAGES_READ
  MESSAGES_WRITE
  TEMPLATES_READ
  TEMPLATES_WRITE
  CAMPAIGNS_READ
  CAMPAIGNS_WRITE
  ANALYTICS_READ
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentGateway {
  STRIPE
  RAZORPAY
  PAYU
}

enum WebhookEvent {
  MESSAGE_RECEIVED
  MESSAGE_DELIVERED
  MESSAGE_READ
  TEMPLATE_APPROVED
  TEMPLATE_REJECTED
  CAMPAIGN_COMPLETED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
}